Implementando pruebas de Apache_Beam, creando una PCollection obtenida a partir de una conexiónJDBC 
a SQLserver, después maniobrar con ParDo transformations.

Diseño de laboratorio:
-VS code (No usar Jupyter Lab)
-Repositorio en Github
-Apache_Beam instalado
-SQLserver
-DBeaver
-Conexión a la nube GCP en linea de comando

NOTA: con poner ! antes de una instrucción puedes ejecutar comandos tipo shell en jupyter lab
	! pip3 install apache_beam
NOTA: No olvides guardar el archivo ipynb para hacer el push correctamente

Problema de ambientes en Python
	-Si instalaste apache_beam pero dice que no lo encuentra, revisa en qué kernel lo instalaste, puede
	que hayas creado un nuevo ambiente de python, para verificar usa este comando:
		import sys
		print(sys.executable)
	Después si apache_beam se instaló en un ambiente diferente, entonces desde VS Code o de donde puedas 
	ejecutar el ambiente, instala jupyter lab y añade el kernel del ambiente a jupyter lab de la sig manera:
		pip install jupyterlab

		pip install ipykernel
		#Ejemplo del problema resuelto:
		python -m ipykernel install --user --name python3.12 --display-name "Python 3.12.6"
	Ahora abre jupyter lab y verás el nuevo kernel, úsalo y comprueba que ahora si estés donde esté apache beam con:
		import sys
		print(sys.executable)
	Ahora si, puedes correr apache_beam en jupyterlab

Primeros pasos:
1. Crear un repositorio en github, ponerlo en modo público para empezar
2. Abrir y usar Python en VS code	
	#Crea una carpeta donde pondrás tu respositorio local
	#Abre esa carpeta desde VS code y crea un archivo ipynb
	#Instala apache_beam y numpy, cuidado con el kernel que selecciones, una vez instalado Apache_Beam se vinculará a dicho Kernel
	#En VS Code puedes cambiar fácilmente el kernel sobre el que corres tus librerias
/*2. Instalar jupyter lab desde línea de comando: 
	#De alguna manera se instaló en diferentes lugares apache_beam, se instaló en 
	pip install jupyter lab
	#Ejecutar jupyter lab desde la carpeta deseada, una limpia para hacer conexión a github
	jupyter lab
	#Instalas Apache BEam
	pip install apache_beam */
3. Inicializar Repositorio local y conectar con remoto:
	git init
	git remote add origin https://github.com/jarclep/PruebasAB.git #conexión con remoto creado en 1.
	git add . //staging
	#Ahora doy mis credenciales para que github sepa quién soy, cuál es mi correo
	git config --global user.email "jarclep@gmail.com"
	git config --global user.name "Arturo Clemente"
	git commit -m "Primer commit" #importantisimo el primer commit
	#Cuando intentas el primer push, github te da esto comando 
	git push --set-upstream origin main #Tienes tu primer commit a este repositorio
4. Crear base de datos pruebas SQLserver local
	Descargar SQLserver gratis, una vez instalado, instalar SSMS
	Server=localhost;Database=master;Trusted_Connection=True;
	#la regla se llamo SQLserver-dummy
	User: sqlserver; P4$$w0rd

	Instrucciones de ChatGPT con añadidos (falta corregir lo del puerto TCP)
	4.1. Configura SQL Server para aceptar conexiones remotas
	Abre SSMS e inicia sesión en tu instancia de SQL Server.
	Haz clic derecho en el nombre del servidor en el Explorador de Objetos y selecciona Propiedades.
	Ve a la sección Conexiones y asegúrate de que la opción Permitir conexiones remotas a este servidor esté marcada.
	Aplica los cambios y reinicia el servicio de SQL Server si es necesario.
	4.2. Habilita la autenticación de SQL Server
	En Propiedades del Servidor, ve a Seguridad.
	Selecciona Autenticación de SQL Server y de Windows. Esto permite conectarte con un usuario de SQL Server, lo cual facilita la conexión desde Python.
	Haz clic en Aceptar y reinicia el servicio de SQL Server para que los cambios surtan efecto.
	4.3. Configura el Firewall de Windows (si aplica)
	Asegúrate de que el puerto 1433 (el puerto predeterminado de SQL Server) esté abierto en el firewall para permitir conexiones desde aplicaciones externas. Puedes hacerlo siguiendo estos pasos:

	Ve a Configuración del Firewall de Windows.
	Selecciona Reglas de entrada y luego Nueva regla.
	Elige Puerto como tipo de regla, y selecciona TCP con el número de puerto 1433.
	Permite la conexión y asigna un nombre a la regla.
	4.4. Crea un usuario de SQL Server (si no tienes uno)
	Si no tienes un usuario de SQL Server configurado, puedes crear uno:

	En SSMS, expande la carpeta Seguridad y haz clic derecho en Inicios de sesión.
	Selecciona Nuevo inicio de sesión y crea un usuario con contraseña, asegurándote de darle permisos para conectarse a la base de datos que deseas acceder desde Python.
	##Para que este paso funcione es necesario que des click derecho a tu servidor SQL en el que accedes a tus bases de datos
	ahí te vas a la opción "restart", un vez hecho eso te va a solicitar que aceptes, esperas a que termine y ahora si podrás 
	iniciar con el sql server login, en caso de que no te deje reiniciar la base de datos, reinicia la computadora
	4.5. Instala el controlador de Python para SQL Server
	En tu entorno de Python, instala pyodbc (una biblioteca que permite la conexión con SQL Server) con este comando:
	! pip install pyodbc
	4.6. Conéctate a SQL Server desde Python, ya funcionó con el código de python

NOTA: falta corregir lo del puerto TCP:1433 que parece que hay que investigar más:
https://www.youtube.com/watch?v=jcC0HrwjwoA
Util: https://www.youtube.com/watch?v=UY8nWieArI4
Hasta ahora con ese vídeo, al usar Dbeaver si se conecta

5. Pruebas de conexión con libreria JDBC de apache_beam.io.jdbc
	
	